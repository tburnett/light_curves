# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_config.ipynb (unless otherwise specified).

__all__ = ['MJD', 'UTC', 'day', 'first_data', 'Config', 'Files', 'PointSource']

# Cell
from astropy.time import Time
from astropy.coordinates import SkyCoord
from dataclasses import dataclass
from pathlib import Path
from typing import Tuple
import os,glob
import numpy as np

# Cell

day = 24*3600.
first_data=54683

def MJD(met):
    "convert MET to MJD"
    #mission_start = Time('2001-01-01T00:00:00', scale='utc').mjd
    # From a FT2 file header
    # MJDREFI =               51910. / Integer part of MJD corresponding to SC clock S
    # MJDREFF =  0.00074287037037037 / Fractional part of MJD corresponding to SC cloc
    mission_start = 51910.00074287037
    return (mission_start + met/day  )

def UTC(mjd):
    " convert MJD value to ISO date string"
    t=Time(mjd, format='mjd')
    t.format='iso'; t.out_subfmt='date_hm'
    return t.value

# Cell
@dataclass
class Config:
    """Default light curve configuration parameters"""
    verbose : int = 3
    use_cache : bool = True

    # photon selection
    mjd_range : Tuple=None
    radius: float = 5
    cos_theta_max:float=0.4
    z_max : float=100

    # binning
    energy_edges = np.logspace(2,6,17)
    time_interval: int = 1

    # healpix data representation used by data
    nside : int=1024
    nest: bool=True

    # exposure calculation
    bins_per_decade: int=4
    base_spectrum: str='lambda E: (E/1000)**-2.1'
    energy_range: Tuple = (100.,1e6)

    # analysis
    likelihood_rep: str='poisson'

    def __repr__(self):
        s = 'Configuration parameters \n'
        for name, value in self.__dict__.items():
            s += f'  {name:15s} : {value}\n'
        return s

# Cell

@dataclass
class Files:
    """ paths to the various files that we need"""

    data:str = '$HOME/data'
    ft2: str = '$HOME/work/lat-data/ft2'
    gti: str = '$HOME/work/lat-data/binned/'
    aeff:str = '$HOME/work/lat-data/aeff'
    weights: str = '$HOME/onedrive/fermi/weight_files'
    cache: str = '/tmp/light_curves'

    # expand -- not implemented in Path
    def __post_init__(self):
        d = self.__dict__
        for name, value in d.items():
            d[name] = Path(os.path.expandvars(value))
        self.cache.mkdir(exist_ok=True)

    @property
    def valid(self):
        """assume all files ok if aeff"""
        return self.aeff.exists()

    def __repr__(self):
        s = 'File paths for light curves\n'
        for name, value in self.__dict__.items():
            s += f'  {name:10s} : {value}\n'
        return s

    def clear_cache(self):
        for f in self.cache.iterdir():
            f.unlink()

# Cell
class PointSource():
    """Manage the position and name of a point source
    """
    def __init__(self, name, position=None):
        """position: (l,b) tuple or None. if None, expect to be found by lookup
        """
        self.name=name
        if position is None:
            skycoord = SkyCoord.from_name(name)
            gal = skycoord.galactic
            self.l,self.b = (gal.l.value, gal.b.value)
        else:
            self.l,self.b = position
            skycoord = SkyCoord(self.l,self.b, unit='deg', frame='galactic')
        self.skycoord = skycoord
    def __str__(self):
        return f'Source "{self.name}" at: (l,b)=({self.l:.3f},{self.b:.3f})'
    def __repr__(self): return str(self)

    @property
    def ra(self):
        sk = self.skycoord.transform_to('fk5')
        return sk.ra.value
    @property
    def dec(self):
        sk = self.skycoord.transform_to('fk5')
        return sk.dec.value

    @property
    def filename(self):
        """Modified name for file system"""
        return self.name.replace(' ', '_').replace('+','p')

    @classmethod
    def fk5(cls, name, position):
        """position: (ra,dec) tuple """
        ra,dec = position
        sk = SkyCoord(ra, dec, unit='deg',  frame='fk5').transform_to('galactic')
        return cls(name, (sk.l.value, sk.b.value))